/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MultiSigWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOwner"
      | "approve"
      | "approvedBy"
      | "execute"
      | "getOwners"
      | "isOwner"
      | "owners"
      | "proposalCount"
      | "proposals"
      | "propose"
      | "removeOwner"
      | "revoke"
      | "threshold"
      | "updateThreshold"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approved"
      | "Deposit"
      | "Executed"
      | "OwnerAdded"
      | "OwnerRemoved"
      | "ProposalCreated"
      | "Revoked"
      | "ThresholdUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedBy",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateThreshold",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approvedBy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateThreshold",
    data: BytesLike
  ): Result;
}

export namespace ApprovedEvent {
  export type InputTuple = [owner: AddressLike, proposalId: BigNumberish];
  export type OutputTuple = [owner: string, proposalId: bigint];
  export interface OutputObject {
    owner: string;
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish, result: BytesLike];
  export type OutputTuple = [proposalId: bigint, result: string];
  export interface OutputObject {
    proposalId: bigint;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerAddedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerRemovedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    riskScore: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    to: string,
    value: bigint,
    riskScore: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    to: string;
    value: bigint;
    riskScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedEvent {
  export type InputTuple = [owner: AddressLike, proposalId: BigNumberish];
  export type OutputTuple = [owner: string, proposalId: bigint];
  export interface OutputObject {
    owner: string;
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdUpdatedEvent {
  export type InputTuple = [threshold: BigNumberish];
  export type OutputTuple = [threshold: bigint];
  export interface OutputObject {
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiSigWallet extends BaseContract {
  connect(runner?: ContractRunner | null): MultiSigWallet;
  waitForDeployment(): Promise<this>;

  interface: MultiSigWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOwner: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  approve: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approvedBy: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  execute: TypedContractMethod<
    [proposalId: BigNumberish],
    [string],
    "nonpayable"
  >;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  isOwner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, bigint, string, bigint] & {
        to: string;
        value: bigint;
        data: string;
        approvals: bigint;
        executed: boolean;
        riskScore: bigint;
        proposer: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  propose: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      riskScore: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  removeOwner: TypedContractMethod<
    [ownerToRemove: AddressLike],
    [void],
    "nonpayable"
  >;

  revoke: TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;

  threshold: TypedContractMethod<[], [bigint], "view">;

  updateThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedBy"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[proposalId: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, bigint, string, bigint] & {
        to: string;
        value: bigint;
        data: string;
        approvals: bigint;
        executed: boolean;
        riskScore: bigint;
        proposer: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      riskScore: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeOwner"
  ): TypedContractMethod<[ownerToRemove: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "threshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approved"
  ): TypedContractEvent<
    ApprovedEvent.InputTuple,
    ApprovedEvent.OutputTuple,
    ApprovedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Executed"
  ): TypedContractEvent<
    ExecutedEvent.InputTuple,
    ExecutedEvent.OutputTuple,
    ExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerAdded"
  ): TypedContractEvent<
    OwnerAddedEvent.InputTuple,
    OwnerAddedEvent.OutputTuple,
    OwnerAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerRemoved"
  ): TypedContractEvent<
    OwnerRemovedEvent.InputTuple,
    OwnerRemovedEvent.OutputTuple,
    OwnerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Revoked"
  ): TypedContractEvent<
    RevokedEvent.InputTuple,
    RevokedEvent.OutputTuple,
    RevokedEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdUpdated"
  ): TypedContractEvent<
    ThresholdUpdatedEvent.InputTuple,
    ThresholdUpdatedEvent.OutputTuple,
    ThresholdUpdatedEvent.OutputObject
  >;

  filters: {
    "Approved(address,uint256)": TypedContractEvent<
      ApprovedEvent.InputTuple,
      ApprovedEvent.OutputTuple,
      ApprovedEvent.OutputObject
    >;
    Approved: TypedContractEvent<
      ApprovedEvent.InputTuple,
      ApprovedEvent.OutputTuple,
      ApprovedEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Executed(uint256,bytes)": TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
    Executed: TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;

    "OwnerAdded(address)": TypedContractEvent<
      OwnerAddedEvent.InputTuple,
      OwnerAddedEvent.OutputTuple,
      OwnerAddedEvent.OutputObject
    >;
    OwnerAdded: TypedContractEvent<
      OwnerAddedEvent.InputTuple,
      OwnerAddedEvent.OutputTuple,
      OwnerAddedEvent.OutputObject
    >;

    "OwnerRemoved(address)": TypedContractEvent<
      OwnerRemovedEvent.InputTuple,
      OwnerRemovedEvent.OutputTuple,
      OwnerRemovedEvent.OutputObject
    >;
    OwnerRemoved: TypedContractEvent<
      OwnerRemovedEvent.InputTuple,
      OwnerRemovedEvent.OutputTuple,
      OwnerRemovedEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,address,uint256,uint8)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "Revoked(address,uint256)": TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
    Revoked: TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;

    "ThresholdUpdated(uint256)": TypedContractEvent<
      ThresholdUpdatedEvent.InputTuple,
      ThresholdUpdatedEvent.OutputTuple,
      ThresholdUpdatedEvent.OutputObject
    >;
    ThresholdUpdated: TypedContractEvent<
      ThresholdUpdatedEvent.InputTuple,
      ThresholdUpdatedEvent.OutputTuple,
      ThresholdUpdatedEvent.OutputObject
    >;
  };
}
